---
rules:
  # Require JSDoc comment
  # This rule generates warnings for nodes that do not have JSDoc comments when they should.
  # Currently only function declarations are checked.
  require-jsdoc: 1

  # Validates JSDoc comments are syntactically correct
  # This rule aims to prevent invalid and incomplete JSDoc comments.
  valid-jsdoc:
    - 1
    # Require documentation of the return value type
    - requireReturn: true
    # But do not require the return value's description
      requireReturnDescription: false
      # This option needs functionality verification
      # prefer:
        # return: return

  # Limit Cyclomatic Complexity
  # This rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity
  # allowed in a program.
  complexity:
    - 1
    - 10

  # Disallow Magic Numbers
  # 'Magic numbers' are numbers that occur multiple time in code without an explicit meaning. They
  # should preferably be replaced by named constants. The no-magic-numbers rule aims to make code
  # more readable and refactoring easier by ensuring that special numbers are declared as constants
  # to make their meaning explicit.
  no-magic-numbers:
    - 1
    - enforceConst: true
      detectObjects: true

  # Disallow Warning Comments
  # These comments are a warning signal, that there is something not production ready in your code.
  # Most likely you want to fix it or remove the comments before you roll out your code with a good
  # feeling.
  no-warning-comments:
    - 1
    - location: anywhere

  # Limit Maximum Length of Line
  # Very long lines of code in any language can be difficult to read. In order to aid in readability
  # and maintainability many coders have developed a convention to limit lines of code to a certain
  # number of characters.
  max-len:
    - 1
    # Allow 100 characters per line. This allows two js files to be viewed side-by-side comfortably
    # on a single widescreen monitor
    - 100
    # Treat a tab as two spaces
    - 2

  # Disallow Bitwise Operators
  # This rule is aimed at catching typos that end up as bitwise operators, but are meant to be the
  # much more common &&, ||, <, > operators.
  no-bitwise: 1
